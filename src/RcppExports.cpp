// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// msoc
int msoc(std::string mode, std::string inFile, std::string outFile, std::string pass);
RcppExport SEXP _msoc_msoc(SEXP modeSEXP, SEXP inFileSEXP, SEXP outFileSEXP, SEXP passSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< std::string >::type inFile(inFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outFile(outFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type pass(passSEXP);
    rcpp_result_gen = Rcpp::wrap(msoc(mode, inFile, outFile, pass));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_msoc_msoc", (DL_FUNC) &_msoc_msoc, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_msoc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
